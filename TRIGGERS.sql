DELIMITER $$

# ACTUALIZAR PUNTUACION PROMEDIO DE EMPRESA DESPUES DE INSERTAR VALORACION
DROP TRIGGER IF EXISTS `TRG_After_Valoracion_Insert`;
$$
CREATE TRIGGER `TRG_After_Valoracion_Insert` AFTER INSERT ON `VALORACION` FOR EACH ROW
BEGIN
  UPDATE EMPRESA SET PUNTUACION_PROMEDIO = F_CALCULAR_PROMEDIO_EMPRESA(NEW.EMPRE_ID) WHERE EMPRE_ID = NEW.EMPRE_ID;
END$$

DELIMITER ;

DELIMITER $$

# ACTUALIZAR PUNTUACION PROMEDIO DE EMPRESA DESPUES DE ACTUALIZAR VALORACION
DROP TRIGGER IF EXISTS `TRG_After_Valoracion_Update`;
$$
CREATE TRIGGER `TRG_After_Valoracion_Update` AFTER UPDATE ON `VALORACION` FOR EACH ROW
BEGIN
  UPDATE EMPRESA SET PUNTUACION_PROMEDIO = F_CALCULAR_PROMEDIO_EMPRESA(NEW.EMPRE_ID) WHERE EMPRE_ID = NEW.EMPRE_ID;
END$$

DELIMITER ;

DELIMITER $$

# ACTUALIZAR PUNTUACION PROMEDIO DE EMPRESA DESPUES DE ELIMINAR VALORACION
DROP TRIGGER IF EXISTS `TRG_After_Valoracion_Delete`;
$$
CREATE TRIGGER `TRG_After_Valoracion_Delete` AFTER DELETE ON `VALORACION` FOR EACH ROW
BEGIN
  UPDATE EMPRESA SET PUNTUACION_PROMEDIO = F_CALCULAR_PROMEDIO_EMPRESA(OLD.EMPRE_ID) WHERE EMPRE_ID = OLD.EMPRE_ID;
END$$

DELIMITER ;

DELIMITER $$

# VALIDAR FECHAS DE INICIO Y FIN EN ESTUDIO
DROP TRIGGER IF EXISTS `TRG_Before_Estudio_ValidateDates`;
$$
CREATE TRIGGER `TRG_Before_Estudio_ValidateDates` BEFORE INSERT ON `ESTUDIO` FOR EACH ROW
BEGIN
  IF NEW.FECHA_FIN IS NOT NULL AND NEW.FECHA_FIN < NEW.FECHA_INI THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: La fecha de fin del estudio no puede ser anterior a la fecha de inicio.';
  END IF;
END$$

DELIMITER ;

DELIMITER $$

# VALIDAR FECHAS DE INICIO Y FIN EN EXPERIENCIA
DROP TRIGGER IF EXISTS `TRG_Before_Experiencia_ValidateDates`;
$$
CREATE TRIGGER `TRG_Before_Experiencia_ValidateDates` BEFORE INSERT ON `EXPERIENCIA` FOR EACH ROW
BEGIN
  IF NEW.FECHA_FIN IS NOT NULL AND NEW.FECHA_FIN < NEW.FECHA_INI THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: La fecha de fin de la experiencia no puede ser anterior a la fecha de inicio.';
  END IF;
END$$

DELIMITER ;

DELIMITER $$

# ASIGNAR FECHA DE PUBLICACION AUTOMATICAMENTE A LA OFERTA
DROP TRIGGER IF EXISTS `TRG_Before_Oferta_SetPublishDate`;
$$
CREATE TRIGGER `TRG_Before_Oferta_SetPublishDate` BEFORE INSERT ON `OFERTA` FOR EACH ROW
BEGIN
  IF NEW.FECHA_PUBLI IS NULL THEN
    SET NEW.FECHA_PUBLI = CURDATE();
  END IF;
END$$

DELIMITER ;

DELIMITER $$

# ASIGNAR ROL AUTOMATICAMENTE A NUEVOS USUARIOS
DROP TRIGGER IF EXISTS `TRG_Before_Usuario_AutoAssignRole`;
$$
CREATE TRIGGER `TRG_Before_Usuario_AutoAssignRole` BEFORE INSERT ON `USUARIO` FOR EACH ROW
BEGIN
  IF NEW.EMPRE_ID IS NULL THEN
    SET NEW.ROL_ID = 2;
  ELSE
    SET NEW.ROL_ID = 3;
  END IF;
END$$

DELIMITER ;

DELIMITER $$

# EVITAR POSTULACIONES DUPLICADAS PARA LA MISMA OFERTA POR EL MISMO USUARIO
DROP TRIGGER IF EXISTS `TRG_Before_Postulaciones_PreventDuplicate`;
$$
CREATE TRIGGER `TRG_Before_Postulaciones_PreventDuplicate` BEFORE INSERT ON `POSTULACIONES` FOR EACH ROW
BEGIN
  IF EXISTS (SELECT 1 FROM POSTULACIONES WHERE USR_ID = NEW.USR_ID AND OFER_ID = NEW.OFER_ID) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: Ya te has postulado a esta oferta.';
  END IF;
END$$

DELIMITER ;

DELIMITER $$

# INCREMENTAR POPULARIDAD DE INSTITUCION AL INSERTAR ACTUALIZAR ESTUDIO
DROP TRIGGER IF EXISTS `TRG_After_Estudio_UpdateInstitutionPopularity`;
$$
CREATE TRIGGER `TRG_After_Estudio_UpdateInstitutionPopularity` AFTER INSERT ON `ESTUDIO` FOR EACH ROW
BEGIN
  IF NEW.INSTI_ID IS NOT NULL AND (SELECT NOMBRE FROM INSTITUCION WHERE INSTI_ID = NEW.INSTI_ID) != 'OTRO' THEN
    UPDATE INSTITUCION SET POPULARIDAD = POPULARIDAD + 1 WHERE INSTI_ID = NEW.INSTI_ID;
  END IF;
END$$

DELIMITER ;

DELIMITER $$

# BAJAR POPULARIDAD DE INSTITUCION AL ELIMINAR ESTUDIO
DROP TRIGGER IF EXISTS `TRG_After_Estudio_DeleteInstitutionPopularity`;
$$
CREATE TRIGGER `TRG_After_Estudio_DeleteInstitutionPopularity` AFTER DELETE ON `ESTUDIO` FOR EACH ROW
BEGIN
  IF OLD.INSTI_ID IS NOT NULL AND (SELECT NOMBRE FROM INSTITUCION WHERE INSTI_ID = OLD.INSTI_ID) != 'OTRO' AND (SELECT POPULARIDAD FROM INSTITUCION WHERE INSTI_ID = OLD.INSTI_ID) > 0 THEN
    UPDATE INSTITUCION SET POPULARIDAD = POPULARIDAD - 1 WHERE INSTI_ID = OLD.INSTI_ID;
  END IF;
END$$

DELIMITER ;