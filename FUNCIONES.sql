USE `workable`;

DELIMITER $$

# CALCULAR PROMEDIO DE VALORACION DE EMPRESA
DROP FUNCTION IF EXISTS `F_CALCULAR_PROMEDIO_EMPRESA`;
$$
CREATE FUNCTION `F_CALCULAR_PROMEDIO_EMPRESA`(P_EMPRE_ID INT) RETURNS DECIMAL(3,2)
READS SQL DATA
BEGIN
  DECLARE promedio DECIMAL(3,2);
  SELECT COALESCE(AVG(PUNTUACION), 0.0) INTO promedio FROM VALORACION WHERE EMPRE_ID = P_EMPRE_ID;
  RETURN promedio;
END$$

DELIMITER ;

DELIMITER $$

# VERIFICAR CREDENCIALES DE LOGIN
DROP FUNCTION IF EXISTS `F_CHECK_LOGIN_CREDENTIALS`;
$$
CREATE FUNCTION `F_CHECK_LOGIN_CREDENTIALS` (
  P_USR_NAME VARCHAR(255),
  P_CLAVE_PLANA VARCHAR(255)
) RETURNS INT
DETERMINISTIC
BEGIN
  DECLARE V_USR_ID INT;
  DECLARE PWS VARCHAR(50) DEFAULT '12345';

  SELECT USR_ID INTO V_USR_ID
  FROM USUARIO
  WHERE USR_NAME = P_USR_NAME AND CLAVE = AES_ENCRYPT(P_CLAVE_PLANA, PWS);

  RETURN V_USR_ID;
END$$

DELIMITER ;

DELIMITER $$

# OBTENER NOMBRE DE ROL DE USUARIO
DROP FUNCTION IF EXISTS `F_GET_USER_ROLE_NAME`;
$$
CREATE FUNCTION `F_GET_USER_ROLE_NAME` (
  P_USR_ID INT
) RETURNS VARCHAR(10)
READS SQL DATA
BEGIN
  DECLARE V_ROL_NOMBRE VARCHAR(10);
  SELECT R.NOMBRE INTO V_ROL_NOMBRE
  FROM USUARIO AS U
  JOIN ROL AS R ON U.ROL_ID = R.ROL_ID
  WHERE U.USR_ID = P_USR_ID;
  RETURN V_ROL_NOMBRE;
END$$

DELIMITER ;

DELIMITER $$

# CALCULAR TOTAL DE MESES DE EXPERIENCIA DE UN USUARIO
DROP FUNCTION IF EXISTS `F_GET_USER_TOTAL_EXPERIENCE_MONTHS`;
$$
CREATE FUNCTION `F_GET_USER_TOTAL_EXPERIENCE_MONTHS` (
  P_USR_ID INT
) RETURNS INT
READS SQL DATA
BEGIN
  DECLARE total_meses INT DEFAULT 0;

  SELECT SUM(
    PERIOD_DIFF(
      IFNULL(DATE_FORMAT(FECHA_FIN, '%Y%m'), DATE_FORMAT(CURDATE(), '%Y%m')),
      DATE_FORMAT(FECHA_INI, '%Y%m')
    )
  ) INTO total_meses
  FROM EXPERIENCIA
  WHERE USR_ID = P_USR_ID;

  RETURN COALESCE(total_meses, 0);
END$$

DELIMITER ;

DELIMITER $$

# CONTAR OFERTAS ACTIVAS POR EMPRESA
DROP FUNCTION IF EXISTS `F_COUNT_ACTIVE_OFFERS_BY_COMPANY`;
$$
CREATE FUNCTION `F_COUNT_ACTIVE_OFFERS_BY_COMPANY` (
  P_EMPRE_ID INT
) RETURNS INT
READS SQL DATA
BEGIN
  DECLARE active_offers_count INT;
  SELECT COUNT(OFER_ID) INTO active_offers_count
  FROM OFERTA
  WHERE EMPRE_ID = P_EMPRE_ID AND FECHA_LIMIT >= CURDATE();
  RETURN active_offers_count;
END$$

DELIMITER ;

DELIMITER $$

# CONTAR POSTULACIONES PARA UNA OFERTA
DROP FUNCTION IF EXISTS `F_GET_APPLICATIONS_COUNT_FOR_OFFER`;
$$
CREATE FUNCTION `F_GET_APPLICATIONS_COUNT_FOR_OFFER` (
  P_OFER_ID INT
) RETURNS INT
READS SQL DATA
BEGIN
  DECLARE applications_count INT;
  SELECT COUNT(POSTUL_ID) INTO applications_count
  FROM POSTULACIONES
  WHERE OFER_ID = P_OFER_ID;
  RETURN applications_count;
END$$

DELIMITER ;

DELIMITER $$

# VERIFICAR SI NOMBRE DE USUARIO EXISTE
DROP FUNCTION IF EXISTS `F_CHECK_USERNAME_EXISTS`;
$$
CREATE FUNCTION `F_CHECK_USERNAME_EXISTS` (
  P_USR_NAME VARCHAR(255)
) RETURNS BOOLEAN
READS SQL DATA
BEGIN
  RETURN EXISTS (SELECT 1 FROM USUARIO WHERE USR_NAME = P_USR_NAME);
END$$

DELIMITER ;

DELIMITER $$

# VERIFICAR SI CORREO ELECTRONICO EXISTE
DROP FUNCTION IF EXISTS `F_CHECK_EMAIL_EXISTS`;
$$
CREATE FUNCTION `F_CHECK_EMAIL_EXISTS` (
  P_CORREO VARCHAR(255)
) RETURNS BOOLEAN
READS SQL DATA
BEGIN
  RETURN EXISTS (SELECT 1 FROM USUARIO WHERE CORREO = P_CORREO);
END$$

DELIMITER ;

DELIMITER $$

# CONTAR POSTULACIONES DE EMPRESA POR ESTADO
DROP FUNCTION IF EXISTS `F_COUNT_COMPANY_APPLICATIONS_BY_STATUS`;
$$
CREATE FUNCTION `F_COUNT_COMPANY_APPLICATIONS_BY_STATUS` (
  P_EMPRE_ID INT,
  P_ESTADO_NOMBRE VARCHAR(10)
) RETURNS INT
READS SQL DATA
BEGIN
  DECLARE applications_count INT;
  DECLARE V_ESTAD_ID INT;

  SELECT ESTAD_ID INTO V_ESTAD_ID FROM ESTADO WHERE NOMBRE = P_ESTADO_NOMBRE LIMIT 1;

  IF V_ESTAD_ID IS NULL THEN
    RETURN 0;
  END IF;

  SELECT COUNT(PS.POSTUL_ID) INTO applications_count
  FROM POSTULACIONES AS PS
  JOIN OFERTA AS O ON PS.OFER_ID = O.OFER_ID
  WHERE O.EMPRE_ID = P_EMPRE_ID AND PS.ESTAD_ID = V_ESTAD_ID;

  RETURN applications_count;
END$$

DELIMITER ;